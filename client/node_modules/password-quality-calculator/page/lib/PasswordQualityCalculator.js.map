{"version":3,"sources":["webpack://PasswordQualityCalculator/webpack/universalModuleDefinition","webpack://PasswordQualityCalculator/webpack/bootstrap","webpack://PasswordQualityCalculator/../lib/PopularPasswords.js","webpack://PasswordQualityCalculator/../lib/PasswordQualityCalculator.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","m_dicts","getMaxLength","iMaxLen","_i","_Object$keys","keys","length","iLen","parseInt","ContainsLength","nLength","IsPopularPassword","password","Error","includes","GetDictSize","load","passwordList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","iterator","next","done","pw","push","err","reset","_readOnlyError","PatternID","LowerAlpha","UpperAlpha","Digit","Special","High","Other","Dictionary","Repetition","Number","DiffSeq","All","PrintableAsciiSpecial","UpperCase","LowerCase","Digits","HighAnsiChars","ch","sbHighAnsi","String","fromCharCode","apply","Assert","ok","msg","m_lCharTypes","QeCharType","chTypeID","strAlphabet","bIsConsecutive","nChars","_classCallCheck","RangeError","TypeID","Alphabet","CharCount","m_chFirst","charCodeAt","m_chLast","CharSize","Math","log2","indexOf","EntropyEncoder","uBaseWeight","uCharWeight","uOccExclThreshold","m_strAlph","m_uBaseWeight","m_uCharWeight","m_uOccExclThreshold","m_dHisto","uOcc","uTotalWeight","_Object$values","values","u","dSize","dTotalWeight","_i2","_Object$values2","uWeight","MultiEntropyEncoder","m_dEncs","ec","_i3","_Object$values3","Reset","chData","Write","_i4","_Object$values4","GetOutputSize","QePatternInstance","iPosition","chPatternID","dblCost","ctSingle","Position","Length","Cost","SingleCharType","QePathState","lPath","Path","GetCharType","nTypes","Contains","ComputePathCost","vPassword","ecPattern","mcData","dblPatternCost","dblDataCost","pi","tChar","PartsEqual","v","x1","x2","ErasePart","chErased","j","AddNumberPattern","vPatterns","sb","strNumber","nZeros","strNonZero","substring","parseFloat","FindPopularPasswords","vLower","toLowerCase","vLeet","str","newstr","DecodeLeetChar","charAt","DecodeLeet","nSubLen","min","PopularPasswords","vSub","EvalAddPopularPasswordPattern","StringClear","pos","count","erased","chLeet","sub","dblCostPerMod","uDictSize","v1","iOffset1","v2","iOffset2","nDist","HammingDist","k","PasswordQualityCalculator","strSpecial","nSp","nHi","EnsureInitialized","string","array","stringToArray","bFoundRep","FindRepetitions","FindNumbers","Infinity","dCur","FindDiffSeqs","uw","sqrt","AddEncoder","dblMinCost","tStart","Date","now","sRec","pop","lSubs","lNewPath","_toConsumableArray","sNew","ceil"],"mappings":"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","file":"PasswordQualityCalculator.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PasswordQualityCalculator\"] = factory();\n\telse\n\t\troot[\"PasswordQualityCalculator\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const m_dicts = {};\r\n\r\nexport function getMaxLength() {\r\n  let iMaxLen = 0;\r\n  for (let iLen of Object.keys(m_dicts)) {\r\n    if (parseInt(iLen) > iMaxLen) iMaxLen = parseInt(iLen);\r\n  }\r\n  return iMaxLen;\r\n}\r\n\r\nexport function ContainsLength(nLength) {\r\n  return nLength in m_dicts;\r\n}\r\n\r\nexport function IsPopularPassword(password) {\r\n  if (password == null) throw new Error();\r\n  if (password.length == 0) { return false; }\r\n\r\n  if (!(password.length in m_dicts)) {\r\n    return false;\r\n  }\r\n\r\n  return m_dicts[password.length].includes(password);\r\n}\r\n\r\nexport function GetDictSize(length) {\r\n\r\n  if (!(length in m_dicts)) {\r\n    return 0;\r\n  }\r\n\r\n  return m_dicts[length].length;\r\n}\r\n\r\nexport function load(passwordList) {\r\n  for (let pw of passwordList) {\r\n    if (pw.length in m_dicts) {\r\n      m_dicts[pw.length].push(pw);\r\n    } else {\r\n      m_dicts[pw.length] = [pw];\r\n    }\r\n  }\r\n}\r\n\r\nexport function reset() {\r\n  m_dicts = {}\r\n}","import * as PopularPasswords from './PopularPasswords.js';\r\n\r\nconst PatternID = {\r\n  LowerAlpha: 'L',\r\n  UpperAlpha: 'U',\r\n  Digit: 'D',\r\n  Special: 'S',\r\n  High: 'H',\r\n  Other: 'X',\r\n\r\n  Dictionary: 'W',\r\n  Repetition: 'R',\r\n  Number: 'N',\r\n  DiffSeq: 'C',\r\n\r\n  All: \"LUDSHXWRNC\"\r\n};\r\nconst PrintableAsciiSpecial = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\r\nconst UpperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst LowerCase = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst Digits = \"0123456789\";\r\nconst HighAnsiChars = (() => {\r\n  let sbHighAnsi = [], ch;\r\n  for(ch = 0x00A1; ch <= 0x00AC; ++ch)\r\n    sbHighAnsi.push(ch);\r\n  for(ch = 0x00AE; ch < 0x00FF; ++ch)\r\n    sbHighAnsi.push(ch);\r\n  sbHighAnsi.push(0x00FF);\r\n  return String.fromCharCode.apply(null, sbHighAnsi);\r\n})();\r\n\r\nfunction Assert(ok, msg) {\r\n  if (!ok) {\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\n\r\nclass QeCharType {\r\n  constructor(chTypeID, strAlphabet, bIsConsecutive) {\r\n    let nChars;\r\n    if (typeof strAlphabet === 'string') {\r\n      if(strAlphabet.length === 0) throw new Error();\r\n    } else if (typeof strAlphabet === 'number') {\r\n      if(nChars <= 0) throw new RangeError();\r\n      nChars = strAlphabet;\r\n      strAlphabet = null;\r\n      bIsConsecutive = false;\r\n    } else {\r\n      throw new Error();\r\n    }\r\n\r\n    this.TypeID = chTypeID;\r\n    this.Alphabet = strAlphabet;\r\n    this.CharCount = nChars || this.Alphabet.length;\r\n    this.m_chFirst = (bIsConsecutive ? this.Alphabet.charCodeAt(0) : null);\r\n    this.m_chLast = (bIsConsecutive ? this.Alphabet.charCodeAt(this.CharCount - 1) : null);\r\n\r\n    this.CharSize = Math.log2(this.CharCount);\r\n    nChars || Assert((this.m_chLast - this.m_chFirst) == (this.CharCount - 1) || !bIsConsecutive);\r\n  }\r\n\r\n  Contains(ch)\r\n  {\r\n    if(this.m_chLast !== null)\r\n      return ((ch >= this.m_chFirst) && (ch <= this.m_chLast));\r\n\r\n    if (this.Alphabet.length === 0) throw new Error('Don\\'t call for catch-none set')\r\n    return (this.Alphabet.indexOf(String.fromCharCode(ch)) >= 0);\r\n  }\r\n}\r\n\r\nclass EntropyEncoder {\r\n  constructor(strAlphabet, uBaseWeight,\r\n    uCharWeight, uOccExclThreshold)\r\n  {\r\n    if(strAlphabet === null || strAlphabet.length === 0) throw new Error();\r\n\r\n    this.m_strAlph = strAlphabet;\r\n    this.m_uBaseWeight = uBaseWeight;\r\n    this.m_uCharWeight = uCharWeight;\r\n    this.m_uOccExclThreshold = uOccExclThreshold;\r\n\r\n    this.m_dHisto = {}\r\n  }\r\n\r\n  Reset()\r\n  {\r\n    this.m_dHisto = {};\r\n  }\r\n\r\n\tWrite(ch)\r\n  {\r\n    Assert(this.m_strAlph.indexOf(ch) >= 0);\r\n\r\n    let uOcc = this.m_dHisto[ch] || 0;\r\n    Assert(ch in this.m_dHisto || uOcc === 0);\r\n    this.m_dHisto[ch] = uOcc + 1;\r\n  }\r\n\r\n  GetOutputSize()\r\n  {\r\n    let uTotalWeight = this.m_uBaseWeight * this.m_strAlph.length;\r\n    for (let u of Object.values(this.m_dHisto))\r\n    {\r\n      Assert(u >= 1);\r\n      if(u > this.m_uOccExclThreshold)\r\n        uTotalWeight += (u - this.m_uOccExclThreshold) * this.m_uCharWeight;\r\n    }\r\n\r\n    let dSize = 0.0, dTotalWeight = uTotalWeight;\r\n    for (let u of Object.values(this.m_dHisto))\r\n    {\r\n      let uWeight = this.m_uBaseWeight;\r\n      if(u > this.m_uOccExclThreshold)\r\n        uWeight += (u - this.m_uOccExclThreshold) * this.m_uCharWeight;\r\n\r\n      dSize -= u * Math.log2(uWeight / dTotalWeight);\r\n    }\r\n\r\n    return dSize;\r\n  }\r\n}\r\n\r\nclass MultiEntropyEncoder {\r\n  constructor() {\r\n    this.m_dEncs = {};\r\n  }\r\n\r\n  AddEncoder(chTypeID, ec)\r\n  {\r\n    Assert(ec);\r\n\r\n    Assert(!(chTypeID in this.m_dEncs));\r\n    this.m_dEncs[chTypeID] = ec;\r\n  }\r\n\r\n  Reset()\r\n  {\r\n    for(let ec of Object.values(this.m_dEncs)) {\r\n      ec.Reset();\r\n    }\r\n  }\r\n\r\n  Write(chTypeID, chData)\r\n  {\r\n    let ec = this.m_dEncs[chTypeID];\r\n    if(!ec)\r\n      return false;\r\n\r\n    ec.Write(chData);\r\n    return true;\r\n  }\r\n\r\n  GetOutputSize()\r\n  {\r\n    let d = 0.0;\r\n\r\n    for (let ec of Object.values(this.m_dEncs))\r\n    {\r\n      d += ec.GetOutputSize();\r\n    }\r\n\r\n    return d;\r\n  }\r\n}\r\n\r\nclass QePatternInstance\r\n{\r\n  constructor(iPosition, nLength, chPatternID, dblCost) {\r\n    let ctSingle;\r\n    if (typeof dblCost === 'number') {\r\n      this.Position = iPosition;\r\n      this.Length = nLength;\r\n      this.PatternID = chPatternID;\r\n      this.Cost = dblCost;\r\n      this.SingleCharType = null;\r\n    } else {\r\n      ctSingle = chPatternID;\r\n\r\n      this.Position = iPosition;\r\n      this.Length = nLength;\r\n      this.PatternID = ctSingle.TypeID;\r\n      this.Cost = ctSingle.CharSize;\r\n      this.SingleCharType = ctSingle;\r\n    }\r\n  }\r\n}\r\n\r\nclass QePathState {\r\n  constructor(iPosition, lPath) {\r\n    this.Position = iPosition;\r\n    this.Path = lPath;\r\n  }\r\n}\r\n\r\nlet m_objSyncInit;\r\nlet m_lCharTypes;\r\n\r\nfunction EnsureInitialized() {\r\n  if(m_lCharTypes == null)\r\n  {\r\n    let strSpecial = PrintableAsciiSpecial;\r\n    strSpecial = strSpecial + \" \";\r\n\r\n    let nSp = strSpecial.length;\r\n    let nHi = HighAnsiChars.length;\r\n\r\n    m_lCharTypes = [];\r\n\r\n    m_lCharTypes.push(new QeCharType(PatternID.LowerAlpha,\r\n      LowerCase, true));\r\n    m_lCharTypes.push(new QeCharType(PatternID.UpperAlpha,\r\n      UpperCase, true));\r\n    m_lCharTypes.push(new QeCharType(PatternID.Digit,\r\n      Digits, true));\r\n    m_lCharTypes.push(new QeCharType(PatternID.Special,\r\n      strSpecial, false));\r\n    m_lCharTypes.push(new QeCharType(PatternID.High,\r\n      HighAnsiChars, false));\r\n    m_lCharTypes.push(new QeCharType(PatternID.Other,\r\n      0x10000 - (2 * 26) - 10 - nSp - nHi));\r\n  }\r\n}\r\n\r\nfunction GetCharType(ch) {\r\n  let nTypes = m_lCharTypes.length;\r\n  Assert((nTypes > 0) && (m_lCharTypes[nTypes - 1].CharCount > 256));\r\n\r\n  for(let i = 0; i < (nTypes - 1); ++i)\r\n  {\r\n    if(m_lCharTypes[i].Contains(ch))\r\n      return m_lCharTypes[i];\r\n  }\r\n\r\n  return m_lCharTypes[nTypes - 1];\r\n}\r\n\r\nfunction ComputePathCost(l, vPassword, ecPattern, mcData)\r\n{\r\n  ecPattern.Reset();\r\n  for(let i = 0; i < l.length; ++i)\r\n    ecPattern.Write(l[i].PatternID);\r\n  let dblPatternCost = ecPattern.GetOutputSize();\r\n\r\n  mcData.Reset();\r\n  let dblDataCost = 0.0;\r\n  for(let pi of l)\r\n  {\r\n    let tChar = pi.SingleCharType;\r\n    if(tChar != null)\r\n    {\r\n      let ch = vPassword[pi.Position];\r\n      if(!mcData.Write(tChar.TypeID, ch))\r\n        dblDataCost += pi.Cost;\r\n    }\r\n    else dblDataCost += pi.Cost;\r\n  }\r\n  dblDataCost += mcData.GetOutputSize();\r\n\r\n  return (dblPatternCost + dblDataCost);\r\n}\r\n\r\nfunction FindRepetitions(vPassword, vPatterns)\r\n{\r\n  let v = stringToArray(vPassword);\r\n  let n = vPassword.length;\r\n\r\n  let chErased = 0xffff;\r\n  for(let m = (n / 2); m >= 3; --m)\r\n  {\r\n    for(let x1 = 0; x1 <= (n - (2 * m)); ++x1)\r\n    {\r\n      let bFoundRep = false;\r\n\r\n      for(let x2 = (x1 + m); x2 <= (n - m); ++x2)\r\n      {\r\n        if(PartsEqual(v, x1, x2, m))\r\n        {\r\n          let dblCost = Math.log2(x1 + 1) + Math.log2(m);\r\n          vPatterns[x2].push(new QePatternInstance(x2, m,\r\n            PatternID.Repetition, dblCost));\r\n\r\n          chErased = ErasePart(v, x2, m, chErased);\r\n\r\n          bFoundRep = true;\r\n        }\r\n      }\r\n\r\n      if (bFoundRep) chErased = ErasePart(v, x1, m, chErased);\r\n    }\r\n  }\r\n}\r\n\r\nfunction PartsEqual(v, x1, x2, nLength)\r\n{\r\n  for(let i = 0; i < nLength; ++i)\r\n  {\r\n    if(v[x1 + i] != v[x2 + i]) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction ErasePart(v, i, n, chErased)\r\n{\r\n  for(let j = 0; j < n; ++j) {\r\n    v[i + j] = chErased;\r\n    --chErased;\r\n  }\r\n\r\n  return chErased;\r\n}\r\n\r\nfunction stringToArray(string) {\r\n  let array = [];\r\n  for (let i = 0; i < string.length; i++) {\r\n    array.push(string.charCodeAt(i));\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction FindNumbers(vPassword, vPatterns)\r\n{\r\n  let n = vPassword.length;\r\n  let sb = [];\r\n\r\n  for(let i = 0; i < n; ++i)\r\n  {\r\n    let ch = vPassword.charCodeAt(i);\r\n    if((ch >= 0x30) && (ch <= 0x39)) sb.push(ch);\r\n    else\r\n    {\r\n      AddNumberPattern(vPatterns, sb, i - sb.length);\r\n      sb = [];\r\n    }\r\n  }\r\n  AddNumberPattern(vPatterns, sb, n - sb.length);\r\n}\r\n\r\nfunction AddNumberPattern(vPatterns, sb, i)\r\n{\r\n  if(sb.length <= 2) return;\r\n  let strNumber = String.fromCharCode.apply(null,sb);\r\n\r\n  let nZeros = 0;\r\n  for(let j = 0; j < strNumber.length; ++j)\r\n  {\r\n    if(strNumber.charCodeAt(j) != 0x30) break;\r\n    ++nZeros;\r\n  }\r\n\r\n  let dblCost = Math.log2(nZeros + 1);\r\n  if(nZeros < strNumber.length)\r\n  {\r\n    let strNonZero = strNumber.substring(nZeros);\r\n\r\n    dblCost += Math.log2(parseFloat(strNonZero));\r\n  }\r\n\r\n  vPatterns[i].push(new QePatternInstance(i, strNumber.length,\r\n    PatternID.Number, dblCost));\r\n}\r\n\r\nfunction FindDiffSeqs(vPassword, vPatterns) {\r\n  let n = vPassword.length;\r\n  let d = Infinity, p = 0;\r\n\r\n  for(let i = 1; i <= n; ++i)\r\n  {\r\n    let dCur = ((i == n) ? Infinity :\r\n      (vPassword.charCodeAt(i) - vPassword.charCodeAt(i - 1)));\r\n    if(dCur != d)\r\n    {\r\n      if((i - p) >= 3) // At least 3 chars involved\r\n      {\r\n        let ct = GetCharType(vPassword.charCodeAt(p));\r\n        let dblCost = ct.CharSize + Math.log2(i - p - 1);\r\n\r\n        vPatterns[p].push(new QePatternInstance(p,\r\n          i - p, PatternID.DiffSeq, dblCost));\r\n      }\r\n\r\n      d = dCur;\r\n      p = i - 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction DecodeLeet(str) {\r\n  let newstr = '';\r\n  for (let i = 0; i < str.length; i++) {\r\n    let char = str.charAt(i);\r\n    let decoded = DecodeLeetChar(char);\r\n    newstr += decoded;\r\n  }\r\n  return newstr;\r\n}\r\n\r\nfunction FindPopularPasswords(vPassword, vPatterns) {\r\n  let n = vPassword.length;\r\n\r\n  let vLower = vPassword.toLowerCase();\r\n  let vLeet = DecodeLeet(vLower);\r\n\r\n  for(let nSubLen = Math.min(n, PopularPasswords.getMaxLength()); nSubLen >= 3; --nSubLen) {\r\n    if (!PopularPasswords.ContainsLength(nSubLen)) continue;\r\n\r\n    for(let i = 0; i <= (n - nSubLen); ++i)\r\n\t\t{\r\n      let vSub = vLower.substring(i, i + nSubLen);\r\n\r\n      if (!vSub || vSub.indexOf('\\u0000') !== -1) {\r\n        continue;\r\n      }\r\n\r\n      if(!EvalAddPopularPasswordPattern(vPatterns, vPassword,\r\n        i, vSub, 0.0))\r\n      {\r\n        let vLeetSub = vLeet.substring(i, nSubLen);\r\n        if(EvalAddPopularPasswordPattern(vPatterns, vPassword,\r\n          i, vLeetSub, 1.5))\r\n        {\r\n          vLower = StringClear(vLower, i, nSubLen); // Not vLeet\r\n        }\r\n      }\r\n      else\r\n      {\r\n        vLower = StringClear(vLower, i, nSubLen); // Not vLeet\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction StringClear(str, pos, count) {\r\n  let erased = ''\r\n  for (let i = 0;i < count;i++) {\r\n    erased += '\\u0000'\r\n  }\r\n  return str.substring(0, pos) + erased + str.substring(pos + count);\r\n}\r\n\r\nfunction DecodeLeetChar(chLeet) {\r\n  if((chLeet.charCodeAt(0) >= 0x00C0) && (chLeet.charCodeAt(0) <= 0x00C6)) return 'a';\r\n  if((chLeet.charCodeAt(0) >= 0x00C8) && (chLeet.charCodeAt(0) <= 0x00CB)) return 'e';\r\n  if((chLeet.charCodeAt(0) >= 0x00CC) && (chLeet.charCodeAt(0) <= 0x00CF)) return 'i';\r\n  if((chLeet.charCodeAt(0) >= 0x00D2) && (chLeet.charCodeAt(0) <= 0x00D6)) return 'o';\r\n  if((chLeet.charCodeAt(0) >= 0x00D9) && (chLeet.charCodeAt(0) <= 0x00DC)) return 'u';\r\n  if((chLeet.charCodeAt(0) >= 0x00E0) && (chLeet.charCodeAt(0) <= 0x00E6)) return 'a';\r\n  if((chLeet.charCodeAt(0) >= 0x00E8) && (chLeet.charCodeAt(0) <= 0x00EB)) return 'e';\r\n  if((chLeet.charCodeAt(0) >= 0x00EC) && (chLeet.charCodeAt(0) <= 0x00EF)) return 'i';\r\n  if((chLeet.charCodeAt(0) >= 0x00F2) && (chLeet.charCodeAt(0) <= 0x00F6)) return 'o';\r\n  if((chLeet.charCodeAt(0) >= 0x00F9) && (chLeet.charCodeAt(0) <= 0x00FC)) return 'u';\r\n\r\n  switch(chLeet)\r\n  {\r\n    case '4':\r\n    case '@':\r\n    case '?':\r\n    case '^':\r\n    case '\\u00AA': return 'a';\r\n    case '8':\r\n    case '\\u00DF': return 'b';\r\n    case '(':\r\n    case '{':\r\n    case '[':\r\n    case '<':\r\n    case '\\u00A2':\r\n    case '\\u00A9':\r\n    case '\\u00C7':\r\n    case '\\u00E7': return 'c';\r\n    case '\\u00D0':\r\n    case '\\u00F0': return 'd';\r\n    case '3':\r\n    case '\\u20AC':\r\n    case '&':\r\n    case '\\u00A3': return 'e';\r\n    case '6':\r\n    case '9': return 'g';\r\n    case '#': return 'h';\r\n    case '1':\r\n    case '!':\r\n    case '|':\r\n    case '\\u00A1':\r\n    case '\\u00A6': return 'i';\r\n    case '\\u00D1':\r\n    case '\\u00F1': return 'n';\r\n    case '0':\r\n    case '*':\r\n    case '\\u00A4': // Currency\r\n    case '\\u00B0': // Degree\r\n    case '\\u00D8':\r\n    case '\\u00F8': return 'o';\r\n    case '\\u00AE': return 'r';\r\n    case '$':\r\n    case '5':\r\n    case '\\u00A7': return 's';\r\n    case '+':\r\n    case '7': return 't';\r\n    case '\\u00B5': return 'u';\r\n    case '%':\r\n    case '\\u00D7': return 'x';\r\n    case '\\u00A5':\r\n    case '\\u00DD':\r\n    case '\\u00FD':\r\n    case '\\u00FF': return 'y';\r\n    case '2': return 'z';\r\n    default: return chLeet;\r\n  }\r\n}\r\n\r\nfunction EvalAddPopularPasswordPattern(vPatterns, vPassword, i, sub, dblCostPerMod)\r\n{\r\n  let IsPopularPassword = PopularPasswords.IsPopularPassword(sub);\r\n  let uDictSize = PopularPasswords.GetDictSize(sub.length);\r\n  if(!IsPopularPassword)\r\n    return false;\r\n\r\n  let n = sub.length;\r\n  let d = HammingDist(sub, 0, vPassword, i, n);\r\n\r\n  let dblCost = Math.log2(uDictSize);\r\n\r\n  // dblCost += Math.log2(n binom d)\r\n  let k = Math.min(d, n - d);\r\n  for(let j = n; j > (n - k); --j)\r\n    dblCost += Math.log2(j);\r\n  for(let j = k; j >= 2; --j)\r\n    dblCost -= Math.log2(j);\r\n\r\n  dblCost += dblCostPerMod * d;\r\n\r\n  vPatterns[i].push(new QePatternInstance(i, n, PatternID.Dictionary,\r\n    dblCost));\r\n  return true;\r\n}\r\n\r\nfunction HammingDist(v1, iOffset1, v2, iOffset2, nLength)\r\n{\r\n  let nDist = 0;\r\n  for(let i = 0; i < nLength; ++i)\r\n  {\r\n    if(v1.charCodeAt(iOffset1 + i) !== v2.charCodeAt(iOffset2 + i)) ++nDist;\r\n  }\r\n\r\n  return nDist;\r\n}\r\n\r\nexport default function PasswordQualityCalculator(vPassword)\r\n{\r\n  if (typeof vPassword !== 'string' || vPassword.length === 0) return 0;\r\n\r\n  EnsureInitialized();\r\n\r\n  let n = vPassword.length;\r\n  let vPatterns = [];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    vPatterns[i] = [\r\n      new QePatternInstance(i, 1, GetCharType(vPassword.charCodeAt(i)))\r\n    ];\r\n  }\r\n\r\n  FindRepetitions(vPassword, vPatterns);\r\n  FindNumbers(vPassword, vPatterns);\r\n  FindDiffSeqs(vPassword, vPatterns);\r\n  FindPopularPasswords(vPassword, vPatterns);\r\n\r\n  // Encoders must not be static, because the entropy estimation\r\n  // may run concurrently in multiple threads and the encoders are\r\n  // not read-only\r\n  let ecPattern = new EntropyEncoder(PatternID.All, 0, 1, 0);\r\n  let mcData = new MultiEntropyEncoder();\r\n\r\n  for(let i = 0; i < (m_lCharTypes.length - 1); ++i)\r\n  {\r\n    // Let m be the alphabet size. In order to ensure that two same\r\n    // characters cost at least as much as a single character, for\r\n    // the probability p and weight w of the character it must hold:\r\n    //     -log(1/m) >= -2*log(p)\r\n    // <=> log(1/m) <= log(p^2) <=> 1/m <= p^2 <=> p >= sqrt(1/m);\r\n    //     sqrt(1/m) = (1+w)/(m+w)\r\n    // <=> m+w = (1+w)*sqrt(m) <=> m+w = sqrt(m) + w*sqrt(m)\r\n    // <=> w*(1-sqrt(m)) = sqrt(m) - m <=> w = (sqrt(m)-m)/(1-sqrt(m))\r\n    // <=> w = (sqrt(m)-m)*(1+sqrt(m))/(1-m)\r\n    // <=> w = (sqrt(m)-m+m-m*sqrt(m))/(1-m) <=> w = sqrt(m)\r\n    let uw = Math.sqrt(m_lCharTypes[i].CharCount) | 0;\r\n\r\n    mcData.AddEncoder(m_lCharTypes[i].TypeID, new EntropyEncoder(\r\n      m_lCharTypes[i].Alphabet, 1, uw, 1));\r\n  }\r\n\r\n  let dblMinCost = Infinity;\r\n  let tStart = Date.now();\r\n  \r\n  let sRec = [];\r\n  sRec.push(new QePathState(0, []));\r\n\r\n\r\n  while(sRec.length > 0)\r\n  {\r\n    let tDiff = Date.now() - tStart;\r\n    if(tDiff > 500) break;\r\n\r\n    let s = sRec.pop();\r\n\r\n    if(s.Position >= n)\r\n    {\r\n      Assert(s.Position === n);\r\n\r\n      let dblCost = ComputePathCost(s.Path, vPassword,\r\n        ecPattern, mcData);\r\n      if(dblCost < dblMinCost) dblMinCost = dblCost;\r\n    }\r\n    else\r\n    {\r\n      let lSubs = vPatterns[s.Position];\r\n      for(let i = lSubs.length - 1; i >= 0; --i)\r\n      {\r\n        let pi = lSubs[i];\r\n        Assert(pi.Position == s.Position);\r\n        Assert(pi.Length >= 1);\r\n\r\n        let lNewPath = [];\r\n        lNewPath.push(...s.Path);\r\n        lNewPath.push(pi);\r\n\r\n        let sNew = new QePathState(s.Position +\r\n          pi.Length, lNewPath);\r\n        sRec.push(sNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  return Math.ceil(dblMinCost);\r\n}\r\n\r\nPasswordQualityCalculator.PopularPasswords = PopularPasswords;"],"sourceRoot":""}